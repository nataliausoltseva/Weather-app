{"version":3,"sources":["components/SearchBar/SearchBar.tsx","components/WeatherInformation/WeatherInformation.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SearchBar","props","useState","SearchQuery","setSearchQuery","citiesTyped","className","Grid","container","spacing","style","margin","display","justifyContent","marginTop","Autocomplete","id","options","getOptionLabel","option","width","onChange","event","value","some","item","checkValue","renderInput","params","TextField","label","variant","s","lowerCaseString","toLowerCase","handleSearchQueryChange","target","height","Button","size","onClick","UserInput","SetUserInput","console","log","WeatherInformation","cloud","condition","text","icon","code","feelslike_c","gust_mph","humidity","pressure_mb","temp_c","uv","vis_km","wind_degree","wind_dir","wind_kph","currentInfo","setCurrentInfo","country","lat","localtime","lon","name","locationInfo","setLocationInfo","astro","moon_illumination","moon_phase","moonrise","moonset","sunrise","sunset","day","avghumidity","maxtemp_c","maxwind_kph","mintemp_c","hour","chance_of_rain","chance_of_snow","windchill_c","time","date","firstForecastInfo","setFirstForecastInfo","secondForecastInfo","setSecondForecastInfo","thirdForecastInfo","setThirdForecastInfo","changeDate","newDate","Date","month","getDate","parseInt","getMonth","getFullYear","useEffect","fetch","headers","process","then","response","json","current","location","forecast","forecastday","textAlign","src","alt","first_hours","i","length","today","getHours","getMinutes","push","arrowLeft","fontSize","backgroundColor","arrowRight","data","map","listStyle","flexDirection","rain_chance","snow_chance","firstDay","popupId","popupState","color","bindTrigger","Popover","bindPopover","anchorOrigin","vertical","horizontal","transformOrigin","Box","p","Typography","component","secondHours","secondDay","thirdHours","thirDay","App","setUserInput","a","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7c24d17f.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { IUserInput } from '../interfaces';\r\nimport {Grid, TextField} from '@material-ui/core';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\ninterface ISearchBarProps {\r\n    SetUserInput: (a: IUserInput) => void;\r\n}\r\nfunction SearchBar(props: ISearchBarProps) {\r\n    const [SearchQuery, setSearchQuery] = useState(\"\");\r\n    const handleSearchQueryChange = (s: string) => {\r\n        var lowerCaseString = s.toLowerCase()\r\n        setSearchQuery(lowerCaseString);\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        let UserInput: IUserInput={\r\n            SearchQuery:SearchQuery\r\n        }\r\n        props.SetUserInput(UserInput);\r\n        console.log(UserInput);\r\n    }\r\n    const citiesTyped=[\"Auckland\", \"Christchurch\", \"Wellington\", \"Hamilton\", \"Tauranga\",\"Lower Hutt\", \"Dunedin\", \"Palmerston North\", \"Napier\", \"Hibiscus Coast\", \"Porirua\",\"Rotorua\", \"New Plymouth\", \"Whangarei\", \"Nelson\", \"Invercargill\", \"Hastings\", \"Upper Hutt\", \"Whanganui\", \"Gisborne\", \"Nakhodka\", \"Vladivostok\", \"Moscow\", \"Saint Petersburg\",'Novosibirsk','Yekaterinburg','Kazan','Nizhny Novgorod','Chelyabinsk','Samara','Omsk','Rostov-on-Don','Ufa','Krasnoyarsk','Voronezh','Perm','Volgograd','Krasnodar','Saratov','Tyumen','Tolyatti','Izhevsk','Barnaul','Ulyanovsk','Irkutsk','Khabarovsk','Yaroslavl','Makhachkala','Tomsk','Orenburg','Kemerovo','\tNovokuznetsk','\tRyazan','Naberezhnye Chelny','Astrakhan','\tPenza','Kirov','Lipetsk','\tBalashikha','Cheboksary','\tKaliningrad','Tula','Kursk','Stavropol','Sochi','Ulan-Ude','tver','Magnitogorsk','Ivanovo','Sevastopol','Bryansk','Belgorod','Surgut','\tVladimir','Chita','Nizhny Tagil','Arkhangelsk','Simferopol','Kaluga','Smolensk','Volzhsky','Yakutsk','Saransk','Cherepovets','Kurgan','Vologda','Oryol','Podolsk','Grozny','Vladikavkaz','Tambov','Murmansk','Petrozavodsk','Nizhnevartovsk','Kostroma','Sterlitamak','Novorossiysk','Yoshkar-Ola','Khimki','Taganrog','Komsomolsk-on-Amur','Syktyvkar','Nizhnekamsk','Nalchik','Mytishchi','Shakhty','Dzerzhinsk','Engels','Orsk','Blagoveshchensk','\tBratsk','\tKorolyov','eliky Novgorod','Angarsk','Stary Oskol','Pskov','Lyubertsy','Yuzhno-Sakhalinsk','Biysk','Prokopyevsk','Armavir','Balakovo','Abakan','Rybinsk','Severodvinsk','Norilsk','\tPetropavlovsk-Kamchatsky','\tKrasnogorsk','Ussuriysk','olgodonsk','Novocherkassk','Syzran','Kamensk-Uralsky','Zlatoust','Almetyevsk','elektrostal','Kerch','Miass','Salavat','Pyatigorsk','Kopeysk','Khasavyurt','Rubtsovsk','Maykop','Kolomna','Berezniki','Domodedovo','Kovrov','Odintsovo','Neftekamsk','Kislovodsk','Bataysk','Nefteyugansk','ovocheboksarsk','Serpukhov','Shchyolkovo','Derbent','Kaspiysk','Cherkessk','Novomoskovsk','Nazran','Ramenskoye','Pervouralsk','Kyzyl','Orekhovo-Zuyevo','Novy Urengoy','Obninsk','Nevinnomyssk','\tDolgoprudny','dimitrovgrad','Yessentuki','Kamyshin','Yevpatoria','Reutov','Pushkino','Zhukovsky','\tMurom','Noyabrsk','\tNovoshakhtinsk','Seversk','\tArtyom','Achinsk','Berdsk','Arzamas','\tNoginsk','Elista','Yelets','Khanty-Mansiysk\t','Novokuybyshevsk','Zheleznogorsk','Sergiyev Posad','\tZelenodolsk','Tobolsk','Votkinsk','Mezhdurechensk','Sarov','Serov','Mikhaylovsk','Sarapul','Leninsk-Kuznetsky','Ukhta','Voskresensk','Solikamsk','Glazov','Magadan','Gatchina','Velikiye Luki','Michurinsk','\tLobnya','Kansk','Anapa','Kamensk-Shakhtinsky','Kiselyovsk','Gubkin','Buzuluk','Novotroitsk','Yeysk','zheleznogorsk','Bugulma','chaykovsky','\tIvanteyevka','Kineshma','Yurga','Kuznetsk','Azov','Ust-Ilimsk','Novouralsk','Klin','Yalta','Ozyorsk','\tKropotkin','Vidnoye','bor','Gelendzhik','usolye-Sibirskoye','Balashov','Chernogorsk','Vyborg','Dubna','\tVsevolozhsk','Shadrinsk','Novoaltaysk','Yelabuga','Mineralnye Vody','Troitsk','Yegoryevsk','Verkhnyaya Pyshma','Chekhov','Birobidzhan','Chapayevsk','Belovo','Kirovo-Chepetsk','Dmitrov','Tuymazy','Anzhero-Sudzhensk','Feodosia','\tSlavyansk-na-Kubani','Minusinsk','Kstovo','Kogalym','Sosnovy Bor','Georgiyevsk','Sunzha','\tStupino','\tBuynaksk','Zarechny','Belogorsk','Murino','\tBeloretsk','Naro-Fominsk','\tKungur','Gorno-Altaysk','Ishim','Ishimbay','Pavlovsky Posad','Gukovo','Klintsy','Asbest','Urus-Martan','Rossosh','Donskoy','\tKotlas','Volsk','Leninogorsk','\tZelenogorsk','Revda','Budyonnovsk','Tuapse','Polevskoy','Sibay','Izberbash','Lysva','Borisoglebsk','Fryazino','\tKumertau','\tChistopol','Labinsk','Lesosibirsk','Belebey','Lytkarino','Beryozovsky','Nyagan','Prokhladny','Tikhvin','Neryungri','Krymsk','Alexandrov','Aleksin','Rzhev','Mikhaylovka','Shchyokino','\tTikhoretsk','Shuya','Salsk','Pavlovo','Meleuz','Sertolovo','Dzerzhinsky','Krasnoturyinsk','Iskitim','Gudermes','Shali','Apatity','Svobodny','Severomorsk','\tLiski','Volzhsk','Vyksa','Gus-Khrustalny','\tVorkuta','Krasnokamsk','Vyazma','Arsenyev','Snezhinsk','Zhigulyovsk','Belorechensk','Krasnokamensk','Salekhard','Timashyovsk','Kirishi','Solnechnogorsk','Cheremkhovo','Sydney','Melbourne','Brisbane','Perth','Adelaide','Gold Coast–Tweed Heads','Newcastle–Maitland','Canberra–Queanbeyan','\tSunshine Coast','Central Coast','Wollongong','Geelong','Hobart','Townsville','Cairns','Toowoomba','Darwin','Ballarat','Bendigo','[Albury–Wodonga','Launceston','Mackay','Rockhampton','Bunbury','Coffs Harbour','Melton','Bundaberg','Wagga Wagga','Hervey Bay','Mildura–Wentworth','Shepparton–Mooroopna','Port Macquarie','Gladstone–Tannum Sands','Tamworth','Traralgon–Morwell','Orange','Bowral–Mittagong','Busselton','Warragul–Drouin','Dubbo','Nowra–Bomaderry','Geraldton','Bathurst','Warrnambool','Albany','Devonport','Mount Gambier','Kalgoorlie–Boulder','Lismore','\tLismore','Burnie–Wynyard','Maryborough','Victor Harbor–Goolwa','Ballina','Taree','Alice Springs','Morisset–Cooranbong','Armidale','Goulburn','Bacchus Marsh','Gisborne–Macedon','Gisborne–Macedon','Whyalla','Echuca–Moama','Forster–Tuncurry','Griffith','St Georges Basin–Sanctuary Point','Wangaratta','Yeppoon','Murray Bridge','Grafton','Mount Isa','Camden Haven','Broken Hill','Karratha','Moe–Newborough','Horsham','Batemans Bay','Ulladulla','Port Lincoln','Singleton','Bairnsdale','Kempsey','\tWarwick','Sale','Yanchep','Ulverstone','Port Hedland','Broome','Emerald','\tPort Pirie','Port Augusta','Lithgow','Colac','Mudgee','Muswellbrook','Esperance','Parkes','Swan Hill','Portland','Kingaroy'];\r\n\r\n    const checkValue = (value:any)=>{\r\n        if ( citiesTyped.some(item => item === value)) {\r\n            setSearchQuery(value);\r\n        }\r\n        else {\r\n            return;\r\n        }\r\n    }\r\n\r\n  return (\r\n    <div className=\"SearchBarContainer\">\r\n        <Grid container spacing={1} >\r\n            <div style={{margin:\"auto\", display:\"flex\", justifyContent:\"center\", marginTop:\"20px\"}}>\r\n            <Autocomplete\r\n                id=\"combo-box-demo\"\r\n                options={citiesTyped}\r\n                getOptionLabel={(option) => option}\r\n                style={{ width: 300, }}\r\n                onChange={(event, value)=> checkValue(value)}\r\n                renderInput={(params) => <TextField {...params} label=\"Combo box\" variant=\"outlined\" onChange={event => handleSearchQueryChange(event.target.value)} style={{height:\"5em\"}}/>}\r\n                />\r\n\r\n                <Button variant=\"primary\" size=\"sm\" onClick={handleSubmit} style={{width:\"6rem\", height:\"4em\", marginTop:\"2px\"}}>\r\n                    Search\r\n                </Button>\r\n            </div>\r\n        </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBar;","import { Box } from '@material-ui/core';\r\nimport Popover from '@material-ui/core/Popover';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport PopupState, { bindPopover, bindTrigger } from 'material-ui-popup-state';\r\nimport React,{ useEffect, useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ScrollMenu from 'react-horizontal-scrolling-menu';\r\n\r\n//need to have a condition info about current day when calling the api\r\ninterface CurrentInfo {\r\n    cloud: number,\r\n    condition: Condition,\r\n    feelslike_c:number,\r\n    gust_mph: number,\r\n    humidity: number,\r\n    pressure_mb: number,\r\n    temp_c: number,\r\n    uv: number,\r\n    vis_km: number,\r\n    wind_degree: number,\r\n    wind_dir: number,\r\n    wind_kph: number\r\n}\r\n\r\ninterface Condition {\r\n    text: string,\r\n    icon: string,\r\n    code: number\r\n}\r\n\r\n//array\r\ninterface ForecastInfo{\r\n    astro: Astro,\r\n    day: Day,\r\n    hour: Hour[],\r\n    date:string\r\n}\r\n\r\ninterface Astro{\r\n    moon_illumination: string,\r\n    moon_phase: string,\r\n    moonrise: string,\r\n    moonset: string,\r\n    sunrise: string,\r\n    sunset: string\r\n}\r\n\r\ninterface Day{\r\n    avghumidity: number,\r\n    maxtemp_c: number,\r\n    maxwind_kph: number,\r\n    mintemp_c: number,\r\n    uv: number\r\n}\r\n\r\n//array\r\ninterface Hour{\r\n    chance_of_rain:number,\r\n    chance_of_snow: number,\r\n    cloud: number,\r\n    condition: Condition,\r\n    feelslike_c: number,\r\n    temp_c: number,\r\n    wind_degree: number,\r\n    wind_kph: number,\r\n    windchill_c: number,\r\n    time: string\r\n}\r\n\r\ninterface LocationInfo {\r\n    country: string,\r\n    lat: number,\r\n    localtime: string,\r\n    lon: number,\r\n    name: string\r\n}\r\n\r\ninterface IWEatherInformationProps {\r\n    SearchQuery: (string|null);\r\n}\r\n\r\nfunction WeatherInformation(props: IWEatherInformationProps) {\r\n    \r\n    const [currentInfo, setCurrentInfo] = useState<CurrentInfo>({cloud:0, condition:{text:\"\", icon:\"\", code:0}, feelslike_c:0, gust_mph:0, humidity:0, pressure_mb:0, temp_c:0, uv:0, vis_km:0, wind_degree:0, wind_dir:0, wind_kph:0});\r\n    \r\n    const [locationInfo, setLocationInfo] = useState<LocationInfo>({country: \"\", lat:0, localtime:\"\", lon:0, name:\"\"});\r\n    \r\n    const [firstForecastInfo, setFirstForecastInfo] = useState<ForecastInfo>({astro:{moon_illumination:\"\", moon_phase:\"\",moonrise:\"\", moonset:\"\", sunrise:\"\", sunset:\"\"}, day:{avghumidity:0, maxtemp_c:0, maxwind_kph:0, mintemp_c:0, uv:0}, hour:[{chance_of_rain:0, chance_of_snow:0, cloud:0, condition:{text:\"\", icon:\"\", code:0}, feelslike_c:0, temp_c:0, wind_degree:0, wind_kph:0, windchill_c:0, time:\"\"}],date:\"\"});\r\n\r\n    const [secondForecastInfo, setSecondForecastInfo] = useState<ForecastInfo>({astro:{moon_illumination:\"\", moon_phase:\"\",moonrise:\"\", moonset:\"\", sunrise:\"\", sunset:\"\"}, day:{avghumidity:0, maxtemp_c:0, maxwind_kph:0, mintemp_c:0, uv:0}, hour:[{chance_of_rain:0, chance_of_snow:0, cloud:0, condition:{text:\"\", icon:\"\", code:0}, feelslike_c:0, temp_c:0, wind_degree:0, wind_kph:0, windchill_c:0, time:\"\"}],date:\"\"});\r\n\r\n    const [thirdForecastInfo, setThirdForecastInfo] = useState<ForecastInfo>({astro:{moon_illumination:\"\", moon_phase:\"\",moonrise:\"\", moonset:\"\", sunrise:\"\", sunset:\"\"}, day:{avghumidity:0, maxtemp_c:0, maxwind_kph:0, mintemp_c:0, uv:0},date:\"\", hour:[{chance_of_rain:0, chance_of_snow:0, cloud:0, condition:{text:\"\", icon:\"\", code:0}, feelslike_c:0, temp_c:0, wind_degree:0, wind_kph:0, windchill_c:0, time:\"\"}]});\r\n\r\n    useEffect(()=>{\r\n        fetch(`https://weatherapi-com.p.rapidapi.com/forecast.json?q=${props.SearchQuery}&days=3`,{\r\n        headers:{\r\n            \"x-rapidapi-key\": `${process.env.REACT_APP_WEATHER_API_KEY}`,\r\n            \"x-rapidapi-host\": `${process.env.REACT_APP_WEATHER_HOST}`,\r\n        }\r\n    })\r\n    .then(response => response.json())\r\n    .then(response => {\r\n        \r\n        console.log(response);\r\n        setCurrentInfo(response.current);\r\n        setLocationInfo(response.location);\r\n        setFirstForecastInfo(response.forecast.forecastday[0]);\r\n        setSecondForecastInfo(response.forecast.forecastday[1]);\r\n        setThirdForecastInfo(response.forecast.forecastday[2]);\r\n        return;\r\n    });\r\n    // eslint-disable-next-line\r\n    },[props.SearchQuery]);\r\n\r\n    function firstDay(){\r\n        var first_hours = [];\r\n        for(var i=0; i<firstForecastInfo.hour.length;i++){\r\n            var newDate =  new Date(firstForecastInfo.hour[i].time);\r\n            var today = new Date(locationInfo.localtime);\r\n            var newMin = newDate.getHours()*60 + newDate.getMinutes();\r\n            var todayMin = today.getHours()*60 + today.getMinutes();\r\n            if(newMin > todayMin){\r\n                var time = `${newDate.getHours()}:00`;\r\n                first_hours.push({\"hour\":time, \"icon\":firstForecastInfo.hour[i].condition.icon, \"text\":firstForecastInfo.hour[i].condition.text, \"temp_c\":firstForecastInfo.hour[i].temp_c,\"rain_chance\":firstForecastInfo.hour[i].chance_of_rain,\"snow_chance\":firstForecastInfo.hour[i].chance_of_snow});\r\n            }\r\n        }\r\n\r\n        var body = (\r\n            <ScrollMenu\r\n                arrowLeft={<div style={{ fontSize: \"30px\", backgroundColor:\"pink\" }}>{\" < \"}</div>}\r\n                arrowRight={<div style={{ fontSize: \"30px\" }}>{\" > \"}</div>}\r\n                data={first_hours.map((item,i) => <li key={i} style={{listStyle:\"none\",display:\"flex\", flexDirection:\"column\", margin:\"20px\"}}><img src={item.icon} alt={item.text}/><strong><div>{item.rain_chance>0?`${item.rain_chance}%`:\"\"}</div></strong><strong><div>{item.snow_chance>0?`${item.snow_chance}%`:\"\"}</div></strong><div>{item.hour} </div> <div>{item.temp_c}°C</div></li>)}\r\n            />\r\n        )\r\n        return body;\r\n    }\r\n\r\n    function secondDay(){\r\n        var secondHours = [];\r\n        for(var i=0; i<secondForecastInfo.hour.length;i++){\r\n            var newDate =  new Date(secondForecastInfo.hour[i].time);\r\n            var time = `${newDate.getHours()}:00`;\r\n            secondHours.push({\"hour\":time, \"icon\":secondForecastInfo.hour[i].condition.icon, \"text\":secondForecastInfo.hour[i].condition.text, \"temp_c\":secondForecastInfo.hour[i].temp_c,\"rain_chance\":secondForecastInfo.hour[i].chance_of_rain,\"snow_chance\":secondForecastInfo.hour[i].chance_of_snow});\r\n            \r\n        }\r\n        var body = (\r\n            <ScrollMenu\r\n                arrowLeft={<div style={{ fontSize: \"30px\", backgroundColor:\"pink\" }}>{\" < \"}</div>}\r\n                arrowRight={<div style={{ fontSize: \"30px\" }}>{\" > \"}</div>}\r\n                data={secondHours.map((item,i) => <li key={i} style={{listStyle:\"none\",display:\"flex\", flexDirection:\"column\", margin:\"20px\"}}><img src={item.icon} alt={item.text}/><strong><div>{item.rain_chance>0?`${item.rain_chance}%`:\"\"}</div></strong><strong><div>{item.snow_chance>0?`${item.snow_chance}%`:\"\"}</div></strong><div>{item.hour} </div> <div>{item.temp_c}°C</div></li>)}\r\n            />);\r\n\r\n        return body;\r\n    }\r\n\r\n    function thirDay(){\r\n        var thirdHours = [];\r\n        for(var i=0; i<thirdForecastInfo.hour.length;i++){\r\n            var newDate =  new Date(thirdForecastInfo.hour[i].time);\r\n            var time = `${newDate.getHours()}:00`;\r\n            thirdHours.push({\"hour\":time, \"icon\":thirdForecastInfo.hour[i].condition.icon, \"text\":thirdForecastInfo.hour[i].condition.text, \"temp_c\":thirdForecastInfo.hour[i].temp_c,\"rain_chance\":thirdForecastInfo.hour[i].chance_of_rain,\"snow_chance\":thirdForecastInfo.hour[i].chance_of_snow});\r\n        }\r\n\r\n        var body =(\r\n            <ScrollMenu\r\n                arrowLeft={<div style={{ fontSize: \"30px\", backgroundColor:\"pink\" }}>{\" < \"}</div>}\r\n                arrowRight={<div style={{ fontSize: \"30px\" }}>{\" > \"}</div>}\r\n                data={thirdHours.map((item,i) => <li key={i} style={{listStyle:\"none\",display:\"flex\", flexDirection:\"column\", margin:\"20px\"}}><img src={item.icon} alt={item.text}/><strong><div>{item.rain_chance>0?`${item.rain_chance}%`:\"\"}</div></strong><strong><div>{item.snow_chance>0?`${item.snow_chance}%`:\"\"}</div></strong><div>{item.hour} </div> <div>{item.temp_c}°C</div></li>)}\r\n            />\r\n        )\r\n        return body;\r\n    }\r\n\r\n    function changeDate(date:string){\r\n        var newDate = new Date(date);\r\n        var month = [];\r\n        month[0] = \"Jan\";\r\n        month[1] = \"Feb\";\r\n        month[2] = \"Mar\";\r\n        month[3] = \"Apr\";\r\n        month[4] = \"May\";\r\n        month[5] = \"Jun\";\r\n        month[6] = \"Jul\";\r\n        month[7] = \"Aug\";\r\n        month[8] = \"Sept\";\r\n        month[9] = \"Oct\";\r\n        month[10] = \"Nov\";\r\n        month[11] = \"Dec\";\r\n\r\n        var day = newDate.getDate();\r\n        if(day <10){\r\n            day = parseInt(`0${day}`);\r\n        }\r\n\r\n        return `${day} ${month[newDate.getMonth()]} ${newDate.getFullYear()}`;\r\n\r\n    }\r\n    return (\r\n        <div>\r\n            <div style={{textAlign:\"left\"}}>\r\n                {locationInfo.name}, {locationInfo.country}\r\n            </div>\r\n            <div style={{textAlign:\"left\"}}>\r\n                {locationInfo.localtime}\r\n            </div>\r\n            <div>\r\n                <div style={{textAlign:\"left\"}}>\r\n                    {currentInfo.condition.text}\r\n                    <img src={currentInfo.condition.icon} alt={currentInfo.condition.text} />\r\n                </div>\r\n                <div>Temperature: {currentInfo.temp_c}°C</div>\r\n                <div>Feels like: {currentInfo.feelslike_c}°C</div>\r\n                <div>UV: {currentInfo.uv}\r\n                    <div>\r\n                        Max UV: {firstForecastInfo.day.uv}\r\n                    </div>\r\n                </div>\r\n                <div>Wind Direction: {currentInfo.wind_dir}</div>\r\n                <div>Wind speed: {currentInfo.wind_kph}km/h \r\n                    <div>\r\n                        Max Wind speed: {firstForecastInfo.day.maxwind_kph} km/h\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <div>\r\n                    MoonRise: {firstForecastInfo.astro.moonrise}\r\n                </div>\r\n                <div>\r\n                    MoonSet: {firstForecastInfo.astro.moonset}\r\n                </div>\r\n                <div>\r\n                    Moon Phase: {firstForecastInfo.astro.moon_phase}\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <div>\r\n                    SunRise: {firstForecastInfo.astro.sunrise}\r\n                </div>\r\n                <div>\r\n                    SunSet: {firstForecastInfo.astro.sunset}\r\n                </div>\r\n            </div>\r\n            <div>\r\n                {firstDay()}\r\n            </div>\r\n            <div>\r\n                <strong style={{textAlign:\"left\",display:\"flex\", flexDirection:\"row\"}}>\r\n                    <div>\r\n                        {changeDate(secondForecastInfo.date)}\r\n                        <PopupState variant=\"popover\" popupId=\"demo-popup-popover\">\r\n                        {(popupState) => (\r\n                            <div>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                {...bindTrigger(popupState)}\r\n                            >\r\n                                Open Popover\r\n                            </Button>\r\n                            <Popover\r\n                                {...bindPopover(popupState)}\r\n                                anchorOrigin={{\r\n                                vertical: \"bottom\",\r\n                                horizontal: \"center\"\r\n                                }}\r\n                                transformOrigin={{\r\n                                vertical: \"top\",\r\n                                horizontal: \"center\"\r\n                                }}\r\n                            >\r\n                                <Box p={2}>\r\n                                <Typography component={'span'} variant={'body2'}>\r\n                                    <p>Moon rise: {secondForecastInfo.astro.moonrise}</p>\r\n                                    <p>Moon set: {secondForecastInfo.astro.moonset}</p>\r\n                                    <p>Moon phase: {secondForecastInfo.astro.moon_phase}</p>\r\n                                    <br/>\r\n                                    <p>Sun rise: {secondForecastInfo.astro.sunrise}</p>\r\n                                    <p>Sun set: {secondForecastInfo.astro.sunset}</p>\r\n                                    <br/>\r\n                                    <p>UV Level: {secondForecastInfo.day.uv}</p>\r\n                                    <p>Wind speed: {secondForecastInfo.day.maxwind_kph} km/h</p>\r\n                                </Typography>\r\n                                </Box>\r\n                            </Popover>\r\n                            </div>\r\n                        )}\r\n                        </PopupState>    \r\n                    </div>\r\n                </strong>\r\n                {secondDay()}\r\n            </div>\r\n            <div>\r\n                <strong style={{textAlign:\"left\",display:\"flex\", flexDirection:\"row\"}}>\r\n                    <div>\r\n                        {changeDate(thirdForecastInfo.date)}\r\n                        <PopupState variant=\"popover\" popupId=\"demo-popup-popover\">\r\n                        {(popupState) => (\r\n                            <div>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                {...bindTrigger(popupState)}\r\n                            >\r\n                                Open Popover\r\n                            </Button>\r\n                            <Popover\r\n                                {...bindPopover(popupState)}\r\n                                anchorOrigin={{\r\n                                vertical: \"bottom\",\r\n                                horizontal: \"center\"\r\n                                }}\r\n                                transformOrigin={{\r\n                                vertical: \"top\",\r\n                                horizontal: \"center\"\r\n                                }}\r\n                            >\r\n                                <Box p={2}>\r\n                                <Typography component={'span'} variant={'body2'}>\r\n                                    <p>Moon rise: {thirdForecastInfo.astro.moonrise}</p>\r\n                                    <p>Moon set: {thirdForecastInfo.astro.moonset}</p>\r\n                                    <p>Moon phase: {thirdForecastInfo.astro.moon_phase}</p>\r\n                                    <br/>\r\n                                    <p>Sun rise: {thirdForecastInfo.astro.sunrise}</p>\r\n                                    <p>Sun set: {thirdForecastInfo.astro.sunset}</p>\r\n                                    <br/>\r\n                                    <p>UV Level: {thirdForecastInfo.day.uv}</p>\r\n                                    <p>Wind speed: {thirdForecastInfo.day.maxwind_kph} km/h</p>\r\n                                </Typography>\r\n                                </Box>\r\n                            </Popover>\r\n                            </div>\r\n                        )}\r\n                        </PopupState>    \r\n                    </div>\r\n                </strong>\r\n                {thirDay()}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WeatherInformation;","import React, { useState } from 'react';\nimport './App.css';\nimport { IUserInput } from './components/interfaces';\nimport SearchBar from './components/SearchBar/SearchBar';\nimport WeatherInformation from './components/WeatherInformation/WeatherInformation';\n\nfunction App() {\n  const [UserInput, setUserInput] = useState<IUserInput>({\n    SearchQuery:\"Auckland\"\n  });\n\n  function SetUserInput(a: IUserInput){\n    setUserInput(a);\n  }\n\n  return (\n    <div className=\"App\">\n      <SearchBar SetUserInput={(a: IUserInput) => SetUserInput(a)}/>\n      <WeatherInformation SearchQuery={UserInput.SearchQuery} />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}